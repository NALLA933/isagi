from telegram import Update
from telegram.ext import CommandHandler, CallbackContext
import traceback

from shivu import application, db, collection, user_collection, LOGGER

# Database collection for spawn settings
spawn_settings_collection = db['spawn_settings']

# Owner ID
OWNER_ID = 5147822244

# Rarity list with emojis
RARITY_LIST = {
    'üü¢': '·¥Ñ·¥è·¥ç·¥ç·¥è…¥',
    'üü£': ' Ä·¥Ä Ä·¥á',
    'üü°': ' ü·¥á…¢·¥á…¥·¥Ö·¥Ä Ä è',
    'üíÆ': 's·¥ò·¥á·¥Ñ…™·¥Ä ü ·¥á·¥Ö…™·¥õ…™·¥è…¥',
    'üí´': '…¥·¥á·¥è…¥',
    '‚ú®': '·¥ç·¥Ä…¥…¢·¥Ä',
    'üé≠': '·¥Ñ·¥ès·¥ò ü·¥Ä è',
    'üéê': '·¥Ñ·¥á ü·¥ás·¥õ…™·¥Ä ü',
    'üîÆ': '·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥á·¥Ö…™·¥õ…™·¥è…¥',
    'üíã': '·¥á Ä·¥è·¥õ…™·¥Ñ',
    'üå§': 's·¥ú·¥ç·¥ç·¥á Ä',
    '‚òÉÔ∏è': '·¥°…™…¥·¥õ·¥á Ä',
    '‚òîÔ∏è': '·¥ç·¥è…¥s·¥è·¥è…¥',
    'üíù': '·¥†·¥Ä ü·¥á…¥·¥õ…™…¥·¥á',
    'üéÉ': ' ú·¥Ä ü ü·¥è·¥°·¥á·¥á…¥',
    'üéÑ': '·¥Ñ ú Ä…™s·¥õ·¥ç·¥Äs',
    'üèµ': '·¥ç è·¥õ ú…™·¥Ñ',
    'üéó': 's·¥ò·¥á·¥Ñ…™·¥Ä ü ·¥á·¥†·¥á…¥·¥õs',
    'üé•': '·¥Ä·¥ç·¥†'
}


async def set_off_rarity(update: Update, context: CallbackContext) -> None:
    """Disable spawning for specific rarity (Owner only)"""
    user_id = update.effective_user.id

    if user_id != OWNER_ID:
        await update.message.reply_text("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥è·¥°…¥·¥á Ä!")
        return

    if not context.args:
        rarity_list = "\n".join([f"{emoji} {name}" for emoji, name in RARITY_LIST.items()])
        await update.message.reply_text(
            f"üìù <b>·¥ús·¥Ä…¢·¥á:</b> <code>/set_off [rarity emoji or name]</code>\n\n"
            f"<b>·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á  Ä·¥Ä Ä…™·¥õ…™·¥ás:</b>\n{rarity_list}",
            parse_mode='HTML'
        )
        return

    rarity_input = ' '.join(context.args).lower()

    # Find matching rarity
    matched_emoji = None
    matched_name = None

    for emoji, name in RARITY_LIST.items():
        if emoji == rarity_input or name.lower() == rarity_input:
            matched_emoji = emoji
            matched_name = name
            break

    if not matched_emoji:
        await update.message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö  Ä·¥Ä Ä…™·¥õ è! ·¥ús·¥á /set_off ·¥õ·¥è s·¥á·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á  Ä·¥Ä Ä…™·¥õ…™·¥ás.")
        return

    try:
        # Get or create settings
        settings = await spawn_settings_collection.find_one({'type': 'global'})

        if not settings:
            settings = {
                'type': 'global',
                'disabled_rarities': [],
                'disabled_animes': []
            }
            await spawn_settings_collection.insert_one(settings)

        # Check if already disabled
        if matched_emoji in settings.get('disabled_rarities', []):
            await update.message.reply_text(
                f"‚ö†Ô∏è {matched_emoji} <b>{matched_name}</b> …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö!",
                parse_mode='HTML'
            )
            return

        # Add to disabled list
        await spawn_settings_collection.update_one(
            {'type': 'global'},
            {'$addToSet': {'disabled_rarities': matched_emoji}}
        )

        await update.message.reply_text(
            f"‚úÖ <b> Ä·¥Ä Ä…™·¥õ è s·¥ò·¥Ä·¥°…¥…™…¥…¢ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö!</b>\n\n"
            f"{matched_emoji} <b>{matched_name}</b> ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs ·¥°…™ ü ü …¥·¥è·¥õ s·¥ò·¥Ä·¥°…¥ ·¥Ä…¥ è·¥ç·¥è Ä·¥á.",
            parse_mode='HTML'
        )

        LOGGER.info(f"[SET_OFF] Rarity {matched_emoji} {matched_name} disabled by {user_id}")

    except Exception as e:
        LOGGER.error(f"[SET_OFF ERROR] {e}")
        LOGGER.error(traceback.format_exc())
        await update.message.reply_text(f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> <code>{str(e)}</code>", parse_mode='HTML')


async def set_on_rarity(update: Update, context: CallbackContext) -> None:
    """Enable spawning for specific rarity (Owner only)"""
    user_id = update.effective_user.id

    if user_id != OWNER_ID:
        await update.message.reply_text("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥è·¥°…¥·¥á Ä!")
        return

    if not context.args:
        rarity_list = "\n".join([f"{emoji} {name}" for emoji, name in RARITY_LIST.items()])
        await update.message.reply_text(
            f"üìù <b>·¥ús·¥Ä…¢·¥á:</b> <code>/set_on [rarity emoji or name]</code>\n\n"
            f"<b>·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á  Ä·¥Ä Ä…™·¥õ…™·¥ás:</b>\n{rarity_list}",
            parse_mode='HTML'
        )
        return

    rarity_input = ' '.join(context.args).lower()

    # Find matching rarity
    matched_emoji = None
    matched_name = None

    for emoji, name in RARITY_LIST.items():
        if emoji == rarity_input or name.lower() == rarity_input:
            matched_emoji = emoji
            matched_name = name
            break

    if not matched_emoji:
        await update.message.reply_text("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö  Ä·¥Ä Ä…™·¥õ è! ·¥ús·¥á /set_on ·¥õ·¥è s·¥á·¥á ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á  Ä·¥Ä Ä…™·¥õ…™·¥ás.")
        return

    try:
        # Get settings
        settings = await spawn_settings_collection.find_one({'type': 'global'})

        if not settings or matched_emoji not in settings.get('disabled_rarities', []):
            await update.message.reply_text(
                f"‚ö†Ô∏è {matched_emoji} <b>{matched_name}</b> …™s …¥·¥è·¥õ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö!",
                parse_mode='HTML'
            )
            return

        # Remove from disabled list
        await spawn_settings_collection.update_one(
            {'type': 'global'},
            {'$pull': {'disabled_rarities': matched_emoji}}
        )

        await update.message.reply_text(
            f"‚úÖ <b> Ä·¥Ä Ä…™·¥õ è s·¥ò·¥Ä·¥°…¥…™…¥…¢ ·¥á…¥·¥Ä ô ü·¥á·¥Ö!</b>\n\n"
            f"{matched_emoji} <b>{matched_name}</b> ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs ·¥°…™ ü ü s·¥ò·¥Ä·¥°…¥ ·¥Ä…¢·¥Ä…™…¥.",
            parse_mode='HTML'
        )

        LOGGER.info(f"[SET_ON] Rarity {matched_emoji} {matched_name} enabled by {user_id}")

    except Exception as e:
        LOGGER.error(f"[SET_ON ERROR] {e}")
        LOGGER.error(traceback.format_exc())
        await update.message.reply_text(f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> <code>{str(e)}</code>", parse_mode='HTML')


async def off_anime(update: Update, context: CallbackContext) -> None:
    """Disable spawning for specific anime (Owner only)"""
    user_id = update.effective_user.id

    if user_id != OWNER_ID:
        await update.message.reply_text("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥è·¥°…¥·¥á Ä!")
        return

    if not context.args:
        await update.message.reply_text(
            "üìù <b>·¥ús·¥Ä…¢·¥á:</b> <code>/off [anime name]</code>\n\n"
            "<i>·¥áx·¥Ä·¥ç·¥ò ü·¥á: /off Naruto</i>",
            parse_mode='HTML'
        )
        return

    anime_name = ' '.join(context.args)

    try:
        # Get or create settings
        settings = await spawn_settings_collection.find_one({'type': 'global'})

        if not settings:
            settings = {
                'type': 'global',
                'disabled_rarities': [],
                'disabled_animes': []
            }
            await spawn_settings_collection.insert_one(settings)

        # Check if already disabled
        if anime_name.lower() in [a.lower() for a in settings.get('disabled_animes', [])]:
            await update.message.reply_text(
                f"‚ö†Ô∏è <b>{anime_name}</b> …™s ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö!",
                parse_mode='HTML'
            )
            return

        # Add to disabled list
        await spawn_settings_collection.update_one(
            {'type': 'global'},
            {'$addToSet': {'disabled_animes': anime_name}}
        )

        await update.message.reply_text(
            f"‚úÖ <b>·¥Ä…¥…™·¥ç·¥á s·¥ò·¥Ä·¥°…¥…™…¥…¢ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö!</b>\n\n"
            f"üì∫ <b>{anime_name}</b> ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs ·¥°…™ ü ü …¥·¥è·¥õ s·¥ò·¥Ä·¥°…¥ ·¥Ä…¥ è·¥ç·¥è Ä·¥á.",
            parse_mode='HTML'
        )

        LOGGER.info(f"[OFF] Anime {anime_name} disabled by {user_id}")

    except Exception as e:
        LOGGER.error(f"[OFF ERROR] {e}")
        LOGGER.error(traceback.format_exc())
        await update.message.reply_text(f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> <code>{str(e)}</code>", parse_mode='HTML')


async def on_anime(update: Update, context: CallbackContext) -> None:
    """Enable spawning for specific anime (Owner only)"""
    user_id = update.effective_user.id

    if user_id != OWNER_ID:
        await update.message.reply_text("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥è·¥°…¥·¥á Ä!")
        return

    if not context.args:
        await update.message.reply_text(
            "üìù <b>·¥ús·¥Ä…¢·¥á:</b> <code>/on [anime name]</code>\n\n"
            "<i>·¥áx·¥Ä·¥ç·¥ò ü·¥á: /on Naruto</i>",
            parse_mode='HTML'
        )
        return

    anime_name = ' '.join(context.args)

    try:
        # Get settings
        settings = await spawn_settings_collection.find_one({'type': 'global'})

        if not settings:
            await update.message.reply_text(
                f"‚ö†Ô∏è <b>{anime_name}</b> …™s …¥·¥è·¥õ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö!",
                parse_mode='HTML'
            )
            return

        # Find exact match (case-insensitive)
        disabled_animes = settings.get('disabled_animes', [])
        matched_anime = None

        for anime in disabled_animes:
            if anime.lower() == anime_name.lower():
                matched_anime = anime
                break

        if not matched_anime:
            await update.message.reply_text(
                f"‚ö†Ô∏è <b>{anime_name}</b> …™s …¥·¥è·¥õ ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö!",
                parse_mode='HTML'
            )
            return

        # Remove from disabled list
        await spawn_settings_collection.update_one(
            {'type': 'global'},
            {'$pull': {'disabled_animes': matched_anime}}
        )

        await update.message.reply_text(
            f"‚úÖ <b>·¥Ä…¥…™·¥ç·¥á s·¥ò·¥Ä·¥°…¥…™…¥…¢ ·¥á…¥·¥Ä ô ü·¥á·¥Ö!</b>\n\n"
            f"üì∫ <b>{anime_name}</b> ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs ·¥°…™ ü ü s·¥ò·¥Ä·¥°…¥ ·¥Ä…¢·¥Ä…™…¥.",
            parse_mode='HTML'
        )

        LOGGER.info(f"[ON] Anime {anime_name} enabled by {user_id}")

    except Exception as e:
        LOGGER.error(f"[ON ERROR] {e}")
        LOGGER.error(traceback.format_exc())
        await update.message.reply_text(f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> <code>{str(e)}</code>", parse_mode='HTML')


async def remove_character_from_all(update: Update, context: CallbackContext) -> None:
    """Remove a character from all user collections by character ID (Owner only)"""
    user_id = update.effective_user.id

    if user_id != OWNER_ID:
        await update.message.reply_text("‚ö†Ô∏è ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä ·¥è·¥°…¥·¥á Ä!")
        return

    if not context.args:
        await update.message.reply_text(
            "üìù <b>·¥ús·¥Ä…¢·¥á:</b> <code>/rmcol [character_id]</code>\n\n"
            "<i>·¥áx·¥Ä·¥ç·¥ò ü·¥á: /rmcol 12345</i>\n\n"
            "‚ö†Ô∏è <b>·¥°·¥Ä Ä…¥…™…¥…¢:</b> ·¥õ ú…™s ·¥°…™ ü ü  Ä·¥á·¥ç·¥è·¥†·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä “ì Ä·¥è·¥ç ·¥Ä ü ü ·¥ús·¥á Äs!",
            parse_mode='HTML'
        )
        return

    try:
        character_id = context.args[0]

        # First, check if character exists in main collection
        character = await collection.find_one({'id': character_id})

        if not character:
            await update.message.reply_text(
                f"‚ùå <b>·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!</b>\n\n"
                f"…¥·¥è ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä ·¥°…™·¥õ ú …™·¥Ö: <code>{character_id}</code>",
                parse_mode='HTML'
            )
            return

        char_name = character.get('name', '·¥ú…¥·¥ã…¥·¥è·¥°…¥')
        char_anime = character.get('anime', '·¥ú…¥·¥ã…¥·¥è·¥°…¥')
        char_rarity = character.get('rarity', '‚ùì')

        # Send confirmation message
        processing_msg = await update.message.reply_text(
            f"üîÑ <b>·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢...</b>\n\n"
            f" Ä·¥á·¥ç·¥è·¥†…™…¥…¢ ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä “ì Ä·¥è·¥ç ·¥Ä ü ü ·¥ús·¥á Äs:\n"
            f"üìõ <b>{char_name}</b>\n"
            f"üì∫ {char_anime}\n"
            f"{char_rarity} …™·¥Ö: <code>{character_id}</code>",
            parse_mode='HTML'
        )

        # Remove character from all users who have it
        result = await user_collection.update_many(
            {'characters.id': character_id},
            {'$pull': {'characters': {'id': character_id}}}
        )

        users_affected = result.modified_count

        await processing_msg.edit_text(
            f"‚úÖ <b>·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è!</b>\n\n"
            f"üìõ <b>{char_name}</b>\n"
            f"üì∫ {char_anime}\n"
            f"{char_rarity} …™·¥Ö: <code>{character_id}</code>\n\n"
            f"üë• <b>·¥ús·¥á Äs ·¥Ä“ì“ì·¥á·¥Ñ·¥õ·¥á·¥Ö:</b> {users_affected}\n"
            f"üóë  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö “ì Ä·¥è·¥ç ·¥Ä ü ü ·¥ús·¥á Ä ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™·¥è…¥s",
            parse_mode='HTML'
        )

        LOGGER.info(f"[RMCOL] Character {character_id} ({char_name}) removed from {users_affected} users by owner {user_id}")

    except ValueError:
        await update.message.reply_text(
            "‚ùå <b>…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä …™·¥Ö!</b>\n\n"
            "·¥ò ü·¥á·¥Äs·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä …™·¥Ö.",
            parse_mode='HTML'
        )
    except Exception as e:
        LOGGER.error(f"[RMCOL ERROR] {e}")
        LOGGER.error(traceback.format_exc())
        await update.message.reply_text(
            f"‚ùå <b>·¥á Ä Ä·¥è Ä:</b> <code>{str(e)}</code>\n\n"
            f"“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Ä.",
            parse_mode='HTML'
        )


# Register all handlers
application.add_handler(CommandHandler('set_off', set_off_rarity, block=False))
application.add_handler(CommandHandler('set_on', set_on_rarity, block=False))
application.add_handler(CommandHandler('off', off_anime, block=False))
application.add_handler(CommandHandler('on', on_anime, block=False))
application.add_handler(CommandHandler('rmcol', remove_character_from_all, block=False))

LOGGER.info("[RARITY CONTROL] All handlers registered successfully")